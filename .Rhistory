cbind(id = factor(station_id), temp_dt)
for(file_count in 1:n_station){
temp_dt <- fread(paste0(raw_path, fnames[file_count]))
station_id <- substr(fnames[file_count], 1, id_length)
temp_dt <- cbind(id = factor(station_id), temp_dt)
temp_dt <- id_sname[temp_dt, on = 'id', ]
runoff_day_raw <- rbind(runoff_day_raw, temp_dt)
}
(file_count  1:n_station){
runoff_day_raw
str(runoff_day_raw)
runoff_day_raw[, 'hh:mm' := NULL]
runoff_day_raw
colnames(runoff_day_raw)
runoff_day_raw[, 'hh:mm' := NULL]
colnames(runoff_day_raw)[3:4] <- c('date', 'value')
colnames(runoff_day_raw)[3:4] <- c('date', 'value')
runoff_day_raw[, date := as.Date(date)]
id_length <- 7
runoff_day_raw
runoff_day_raw[, date := as.Date(date)]
runoff_day_raw
saveRDS(runoff_day_raw, './data/runoff_day_raw.rds')
library(data.table)
library(ggplot2)
library(ggplot2)
R --version
getRversion()
getRversion()
install.packages("ggplot2")
library(ggplot2)
getRversion()
install.packages("installr")
library(installr)
updateR()
getRversion()
library(data.table)
library(ggplot2)
library(data.table)
library(ggplot2)
runoff_stations <- readRDS('./data/runoff_stations_raw.rds')
runoff_day <- readRDS('./data/runoff_day_raw.rds')
rees_runoff_day <- runoff_day[sname == 'REES']
ggplot(data = rees_runoff_day) +
geom_line(aes(x = date, y = value))
ggplot(data = rees_runoff_day) +
geom_point(aes(x = date, y = value))
ggplot(data = rees_runoff_day,
aes(x = date, y = value)) +
geom_point() +
geom_line()
rees_dier_runoff_day <- runoff_day[sname == 'REES' | sname == 'DIER']
ggplot(data = rees_dier_runoff_day) +
geom_line(aes(x = date, y = value, col = sname))
ggplot(data = runoff_day, aes(x = date, y = value)) +
geom_line() +
facet_wrap(~sname) +
theme_bw()
missing_values <- runoff_day[value < 0, .(missing = .N), by = sname]
sample_size <- runoff_day[, .(size = .N), by = sname]
runoff_stations <- runoff_stations[sample_size, on = 'sname']
runoff_stations <- missing_values[runoff_stations, on = 'sname']
runoff_stations[is.na(missing), missing := 0]
runoff_stations[, missing := missing / size]
runoff_stations[, missing := round(missing, 3)]
setcolorder(runoff_stations,                       #making 'missing' last column
c(setdiff(names(runoff_stations), 'missing'), 'missing'))
runoff_day <- runoff_day[value >= 0]
rees_runoff_day <- runoff_day[sname == 'REES']
ggplot(rees_runoff_day, aes(x = date, y = value)) +
geom_line() +
geom_point() +
theme_bw()
station_time <- runoff_day[, .(start = min(year(date)),
end = max(year(date))),
by = sname]
max_year <- 2016
min_year <- max_year - (30 * 2)
runoff_stations <- runoff_stations[station_time, on  = 'sname']
runoff_stations <- runoff_stations[start <=  min_year &
end >= max_year &
size >= 30 * 2 * 365]
runoff_day <- runoff_day[id %in% runoff_stations$id]
runoff_day <- runoff_day[year(date) <= 2016]
saveRDS(runoff_stations, './data/runoff_stations.rds')
saveRDS(runoff_day, './data/runoff_day.rds')
ggplot(data = rees_runoff_day) +
geom_line(aes(x = date, y = value))
runoff_stations_raw <- readRDS("~/eda_rhine/data/runoff_stations_raw.rds")
ggplot(data = rees_runoff_day) +
geom_point(aes(x = date, y = value))
ggplot(data = rees_runoff_day) +
geom_line(aes(x = date, y = value))
ggplot(data = rees_runoff_day,
aes(x = date, y = value)) +
geom_point() +
geom_line()
library(data.table)
library(ggplot2)
runoff_stations <- readRDS('data/runoff_stations.rds')
runoff_day <- readRDS('data/runoff_day.rds')
str(runoff_day)
View(runoff_day)
str(runoff_stations)
View(runoff_stations)
View(runoff_stations)
table(runoff_stations$country) # For one variable
apply(X = runoff_stations, MARGIN = 2, FUN = table) # For all variables
library(mapview)
install.packages("mapview")
install.packages("sf")
library(mapview)
library(mapview)
library(sf)
temperatures <- c(3, 6, 10, 14)
weights <- c(1, 0.8, 1.2, 1)
library(data.table)
multiply_values <- function(x, y) {
x * y
}
results <- multiply_values(temperatures, weights)
print(results)
library(data.table)
setwd("C:\Users\KARA\Documents\eda_rhine")
setwd("C:/Users/KARA/Documents/eda_rhine")
runoff_data <- readRDS("data/raw/runoff.rds")
runoff_day_raw <- readRDS("~/eda_rhine/data/runoff_day_raw.rds")
runoff_day <- readRDS("~/eda_rhine/data/runoff_day.rds")
library(data.table)
library(ggplot2)
library(mapview)
library(sf)
colset_4 <-  c("#D35C37", "#BF9A77", "#D6C6B9", "#97B8C2")
runoff_stations <- readRDS('data/runoff_stations.rds')
runoff_day <- readRDS('data/runoff_day.rds')
runoff_stats <- runoff_day[, .(mean_day = round(mean(value), 0),
sd_day = round(sd(value), 0),
min_day = round(min(value), 0),
max_day = round(max(value), 0)), by = sname]
head(runoff_stats, 4)
ggplot(runoff_day, aes(value)) +
geom_histogram(fill = "#97B8C2") +
facet_wrap(~sname, scales = 'free') +
theme_bw()
runoff_stats_class <- runoff_stats[, .(sname,
mean_day)]
runoff_stats_class[, runoff_class := factor('low')]
runoff_stats_class[mean_day >= 1000 & mean_day < 2000, runoff_class := factor('medium')]
runoff_stats_class[mean_day >= 2000, runoff_class := factor('high')]
runoff_stations[, area_class := factor('small')]
runoff_stations[area >= 10000 & area < 130000, area_class := factor('medium')]
runoff_stations[area >= 130000, area_class := factor('large')]
runoff_stations[, alt_class := factor('low')]
runoff_stations[altitude >= 50 & altitude < 400, alt_class := factor('medium')]
runoff_stations[altitude >= 400, alt_class := factor('high')]
to_merge <- runoff_stats_class[, .(sname, runoff_class)]
runoff_summary <- runoff_stations[to_merge, on = 'sname']
runoff_day[, year := year(date)]
runoff_day[, month := month(date)]
runoff_month <- runoff_day[, .(value = mean(value)), by = .(month, year, sname)]
runoff_month[, date := as.Date(paste0(year, '-', month, '-1'))]
ggplot(runoff_month, aes(x = factor(month), y = value)) +
geom_boxplot(fill = colset_4[4]) +
facet_wrap(~sname, scales = 'free') +
theme_bw()
runoff_year <- runoff_day[, .(value = mean(value)), by = .(year, sname)]
ggplot(runoff_year[year > 1980], aes(x = year, y = value)) +
geom_line(col =  colset_4[1]) +
geom_point(col = colset_4[1]) +
facet_wrap(~sname, scales = 'free') +
theme_minimal()
runoff_day[month == 12 | month == 1 | month == 2, season := 'winter']
runoff_day[month == 3 | month == 4 | month == 5, season := 'spring']
runoff_day[month == 6 | month == 7 | month == 8, season := 'summer']
runoff_day[month == 9 | month == 10 | month == 11, season := 'autumn']
runoff_day[, season := factor(season, levels = c('winter', 'spring', 'summer', 'autumn'))]
runoff_year[, value_norm := (value - mean(value)) / sd(value), by = sname]
n_stations <- nrow(runoff_summary)
ggplot(runoff_year[year > 1980], aes(x = year, y = value_norm, col = sname)) +
geom_line() +
geom_point() +
scale_color_manual(values = colorRampPalette(colset_4)(n_stations)) +
theme_bw()
runoff_winter <- runoff_day[season == 'winter',
.(value = mean(value)),
by = .(sname, year)]
runoff_summer <- runoff_day[season == 'summer',
.(value = mean(value)),
by = .(sname, year)]
station_coords_sf <- st_as_sf(runoff_summary,
coords = c("lon", "lat"),
crs = 4326)
mapview(station_coords_sf, map.types = 'Stamen.TerrainBackground')
runoff_summary <- runoff_summary[order(-altitude)]
runoff_summary <- runoff_summary[c(1:15, 17:16)]
runoff_summary <- cbind(order_id = 1:17, runoff_summary)
runoff_summary[, sname := reorder(sname, order_id)]
runoff_day[, sname := factor(sname, levels = runoff_summary$sname)]
runoff_month[, sname := factor(sname, levels = runoff_summary$sname)]
runoff_summer[, sname := factor(sname, levels = runoff_summary$sname)]
runoff_winter[, sname := factor(sname, levels = runoff_summary$sname)]
runoff_year[, sname := factor(sname, levels = runoff_summary$sname)]
dt <- runoff_summary[, .(sname, area, alt_class)]
to_plot <- runoff_stats[dt, on = 'sname']
ggplot(to_plot, aes(x = mean_day, y = area, col = sname, cex = alt_class)) +
geom_point() +
scale_color_manual(values = colorRampPalette(colset_4)(n_stations)) +
theme_bw()
saveRDS(runoff_summary, './data/runoff_summary.rds')
saveRDS(runoff_stats, './data/runoff_stats.rds')
saveRDS(runoff_day, './data/runoff_day.rds')
saveRDS(runoff_month, './data/runoff_month.rds')
saveRDS(runoff_summer, './data/runoff_summer.rds')
saveRDS(runoff_winter, './data/runoff_winter.rds')
saveRDS(runoff_year, './data/runoff_year.rds')
clear
setwd("C:/Users/KARA/Documents/eda_rhine")
runoff_data <- readRDS("data/raw/runoff_day.rds")
runoff_data <- readRDS("C:/Users/KARA/Documents/eda_rhine/data/raw/runoff_day.rds")
runoff_data <- readRDS("/data/raw/runoff_day.rds")
runoff_data <- readRDS("~/eda_rhine/data/raw/runoff_day.rds")
runoff_data <- readRDS("/data/raw/runoff_day.rds")
getwd()
runoff_data <- readRDS("C:/Users/KARA/Documents/eda_rhine/data/raw/runoff_day.rds")
runoff_data <- readRDS("/data/runoff_day.rds")
runoff_data <- readRDS("C:/Users/KARA/Documents/eda_rhine/data/runoff_day.rds")
runoff_dt <- as.data.table(runoff_data)
runoff_dt[, date := as.Date(date)]
runoff_dt[, `:=`(month = month(date), year = year(date))]
winter_months_dt <- runoff_dt[month %in% 1:3]
mean_runoff <- winter_months_dt[, .(mean_runoff = mean(runoff, na.rm = TRUE)), by = month]
colnames(winter_months_dt)
mean_runoff <- winter_months_dt[, .(mean_runoff = mean(value, na.rm = TRUE)), by = month]
mean_runoff[, pct_change := c(NA, diff(mean_runoff$mean_runoff) / mean_runoff$mean_runoff[-.N] * 100)]
mean_runoff[, pct_change := c(NA, diff(mean_runoff) / mean_runoff[-.N] * 100)]
print(mean_runoff)
fwrite(mean_runoff, "results/mean_runoff_changes.csv")
# Load necessary libraries
library(data.table)
# Set working directory (adjust the path to your local repository)
setwd("C:/Users/KARA/Documents/eda_rhine")
# Load the runoff data from the .rds file
runoff_data <- readRDS("C:/Users/KARA/Documents/eda_rhine/data/runoff_day.rds")
# Convert to a data.table for efficient processing
runoff_dt <- as.data.table(runoff_data)
# Ensure the date column is in Date format
runoff_dt[, date := as.Date(date)]
# Extract month and year from the date
runoff_dt[, `:=`(month = month(date), year = year(date))]
# Filter data for January, February, and March
winter_months_dt <- runoff_dt[month %in% 1:3]
# Calculate mean runoff for each month
mean_runoff <- winter_months_dt[, .(mean_runoff = mean(value, na.rm = TRUE)), by = month]
# Calculate percentage change between consecutive months
mean_runoff[, pct_change := c(NA, diff(mean_runoff$mean_runoff) / mean_runoff$mean_runoff[-.N] * 100)]
library(data.table)
setwd("C:/Users/KARA/Documents/eda_rhine")
runoff_data <- readRDS("C:/Users/KARA/Documents/eda_rhine/data/runoff_day.rds")
runoff_dt <- as.data.table(runoff_data)
runoff_dt[, date := as.Date(date)]
runoff_dt[, `:=`(month = month(date), year = year(date))]
winter_months_dt <- runoff_dt[month %in% 1:3]
mean_runoff <- winter_months_dt[, .(mean_runoff = mean(value, na.rm = TRUE)), by = month]
mean_runoff[, pct_change := c(NA, diff(mean_runoff$mean_runoff) / mean_runoff$mean_runoff[-.N] * 100)]
mean_runoff[, pct_change := c(NA, diff(mean_runoff$mean_runoff) / mean_runoff$mean_runoff[-.N] * 100)]
mean_runoff[, pct_change := c(NA, diff(mean_runoff$mean_runoff) / mean_runoff$mean_runoff[-.N] * 100)]
mean_runoff[, pct_change := c(NA, diff(mean_runoff$mean_runoff) / mean_runoff$mean_runoff[-.N] * 100)]
mean_runoff <- winter_months_dt[, .(mean_runoff = mean(value, na.rm = TRUE)), by = month]
mean_runoff[, pct_change := c(NA, diff(mean_runoff$mean_runoff) / mean_runoff[-.N, mean_runoff] * 100)]
library(data.table)
setwd("C:/Users/KARA/Documents/eda_rhine")
runoff_data <- readRDS("C:/Users/KARA/Documents/eda_rhine/data/runoff_day.rds")
runoff_dt <- as.data.table(runoff_data)
runoff_dt[, date := as.Date(date)]
runoff_dt[, `:=`(month = month(date), year = year(date))]
winter_months_dt <- runoff_dt[month %in% 1:3]
mean_runoff <- winter_months_dt[, .(mean_runoff = mean(value, na.rm = TRUE)), by = month]
mean_runoff[, pct_change := c(NA, diff(mean_runoff$mean_runoff) / mean_runoff[1:(.N-1), mean_runoff] * 100)]
mean_runoff[, pct_change := c(NA, diff(mean_runoff$mean_runoff) / shift(mean_runoff$mean_runoff, type = "lag") * 100)]
library(data.table)
setwd("C:/Users/KARA/Documents/eda_rhine")
runoff_data <- readRDS("C:/Users/KARA/Documents/eda_rhine/data/runoff_day.rds")
runoff_dt <- as.data.table(runoff_data)
runoff_dt[, date := as.Date(date)]
runoff_dt[, `:=`(month = month(date), year = year(date))]
winter_months_dt <- runoff_dt[month %in% 1:3]
mean_runoff <- winter_months_dt[, .(mean_runoff = mean(value, na.rm = TRUE)), by = month]
setorder(mean_runoff, month)
if (nrow(mean_runoff) > 1) {
# Initialize pct_change column with NA
mean_runoff[, pct_change := NA_real_]
# Calculate percentage change for months after the first one
for (i in 2:nrow(mean_runoff)) {
current <- mean_runoff[i, mean_runoff]
previous <- mean_runoff[i-1, mean_runoff]
mean_runoff[i, pct_change := (current - previous) / previous * 100]
}
}
mean_runoff[is.na(pct_change), pct_change := "No previous month"]
print(mean_runoff)
fwrite(mean_runoff, "results/mean_runoff_changes.csv")
# Load necessary libraries
library(data.table)
# Set working directory (adjust the path to your local repository)
setwd("C:/Users/KARA/Documents/eda_rhine")
# Load the runoff data from the .rds file
runoff_data <- readRDS("C:/Users/KARA/Documents/eda_rhine/data/runoff_day.rds")
# Convert to a data.table for efficient processing
runoff_dt <- as.data.table(runoff_data)
# Ensure the date column is in Date format
runoff_dt[, date := as.Date(date)]
# Extract month and year from the date
runoff_dt[, `:=`(month = month(date), year = year(date))]
# Filter data for January, February, and March
winter_months_dt <- runoff_dt[month %in% 1:3]
# Calculate mean runoff for each month
mean_runoff <- winter_months_dt[, .(mean_runoff = mean(value, na.rm = TRUE)), by = month]
# Sort by month to ensure correct order for percentage calculation
setorder(mean_runoff, month)
# Calculate percentage change between consecutive months
# Using a more explicit approach to avoid the error
if (nrow(mean_runoff) > 1) {
# Initialize pct_change column with NA
mean_runoff[, pct_change := NA_real_]
# Calculate percentage change for months after the first one
for (i in 2:nrow(mean_runoff)) {
current <- mean_runoff[i, mean_runoff]
previous <- mean_runoff[i-1, mean_runoff]
mean_runoff[i, pct_change := (current - previous) / previous * 100]
}
}
# Option 1: Keep as numeric and leave NA for the first month
# This is the cleaner approach for data analysis
# No need to replace NA with text
# Print the results
print(mean_runoff)
# Save the results as a CSV file for reference
fwrite(mean_runoff, "results/mean_runoff_changes.csv")
# Option 2 (Alternative): If you really want text for the first month
# First create a copy with the numeric values
mean_runoff_text <- copy(mean_runoff)
# Convert pct_change to character type for all rows
mean_runoff_text[, pct_change := as.character(pct_change)]
# Now replace NA with text
mean_runoff_text[is.na(pct_change), pct_change := "No previous month"]
# Save this version if needed
# fwrite(mean_runoff_text, "results/mean_runoff_changes_with_text.csv")
# Load necessary libraries
library(data.table)
# Set working directory (adjust the path to your local repository)
setwd("C:/Users/KARA/Documents/eda_rhine")
# Load the runoff data from the .rds file
runoff_data <- readRDS("C:/Users/KARA/Documents/eda_rhine/data/runoff_day.rds")
# Convert to a data.table for efficient processing
runoff_dt <- as.data.table(runoff_data)
# Ensure the date column is in Date format
runoff_dt[, date := as.Date(date)]
# Extract month and year from the date
runoff_dt[, `:=`(month = month(date), year = year(date))]
# Filter data for January, February, and March
winter_months_dt <- runoff_dt[month %in% 1:3]
# Calculate mean runoff for each month
mean_runoff <- winter_months_dt[, .(mean_runoff = mean(value, na.rm = TRUE)), by = month]
# Sort by month to ensure correct order for percentage calculation
setorder(mean_runoff, month)
# Calculate percentage change between consecutive months
# Using a more explicit approach to avoid the error
if (nrow(mean_runoff) > 1) {
# Initialize pct_change column with NA
mean_runoff[, pct_change := NA_real_]
# Calculate percentage change for months after the first one
for (i in 2:nrow(mean_runoff)) {
current <- mean_runoff[i, mean_runoff]
previous <- mean_runoff[i-1, mean_runoff]
mean_runoff[i, pct_change := (current - previous) / previous * 100]
}
}
# Print the results
print(mean_runoff)
# First create a copy with the numeric values
mean_runoff_text <- copy(mean_runoff)
# Convert pct_change to character type for all rows
mean_runoff_text[, pct_change := as.character(pct_change)]
# Now replace NA with text
mean_runoff_text[is.na(pct_change), pct_change := "No previous month"]
# Save
fwrite(mean_runoff_text, "results/assignments/mean_runoff_changes.csv")
# Load necessary libraries
library(data.table)
# Set working directory (adjust the path to your local repository)
setwd("C:/Users/KARA/Documents/eda_rhine")
# Load the runoff data from the .rds file
runoff_data <- readRDS("C:/Users/KARA/Documents/eda_rhine/data/runoff_day.rds")
# Convert to a data.table for efficient processing
runoff_dt <- as.data.table(runoff_data)
# Ensure the date column is in Date format
runoff_dt[, date := as.Date(date)]
# Extract month and year from the date
runoff_dt[, `:=`(month = month(date), year = year(date))]
# Filter data for January, February, and March
winter_months_dt <- runoff_dt[month %in% 1:3]
# Calculate mean runoff for each month
mean_runoff <- winter_months_dt[, .(mean_runoff = mean(value, na.rm = TRUE)), by = month]
# Sort by month to ensure correct order for percentage calculation
setorder(mean_runoff, month)
# Calculate percentage change between consecutive months
# Using a more explicit approach to avoid the error
if (nrow(mean_runoff) > 1) {
# Initialize pct_change column with NA
mean_runoff[, pct_change := NA_real_]
# Calculate percentage change for months after the first one
for (i in 2:nrow(mean_runoff)) {
current <- mean_runoff[i, mean_runoff]
previous <- mean_runoff[i-1, mean_runoff]
mean_runoff[i, pct_change := (current - previous) / previous * 100]
}
}
# Print the results
print(mean_runoff)
# First create a copy with the numeric values
mean_runoff_text <- copy(mean_runoff)
# Convert pct_change to character type for all rows
mean_runoff_text[, pct_change := as.character(pct_change)]
# Now replace NA with text
mean_runoff_text[is.na(pct_change), pct_change := "No previous month"]
# Save
fwrite(mean_runoff_text, "results/assignments/a2/mean_runoff_changes.csv")
# Load necessary libraries
library(data.table)
library(lubridate)
# Set working directory (adjust the path to your local repository)
setwd("C:/Users/KARA/Documents/eda_rhine")
# Create an output file to capture results
output_file <- "results/assignments/task_from2C_output.txt"
sink(output_file)
# Task 1: Create atomic vector of extreme runoff drought years in Europe (EIR panel)
# Years extracted from the rightmost plot in the bottom panel (EIR runoff)
eur_runoff <- c(1921, 1922, 1949, 1954, 1959, 1963, 1976, 1990, 2003, 2015)
cat("Original eur_runoff vector:\n")
print(eur_runoff)
# Sort from latest to most recent using sort()
eur_runoff_sorted <- sort(eur_runoff, decreasing = TRUE)
cat("\nSorted using sort():\n")
print(eur_runoff_sorted)
# Sort from latest to most recent using order()
eur_runoff_ordered <- eur_runoff[order(eur_runoff, decreasing = TRUE)]
cat("\nSorted using order():\n")
print(eur_runoff_ordered)
# Task 2: Create a list of all drought years by type
all_droughts <- list(
precipitation = c(1921, 1945, 1954, 1959, 1976, 2003, 2015),
runoff = c(1921, 1922, 1949, 1954, 1959, 1963, 1976, 1990, 2003, 2015),
soil_moisture = c(1921, 1922, 1954, 1959, 1976, 2003, 2015)
)
cat("\nAll droughts list:\n")
print(all_droughts)
# Task 3: Calculate average interval between droughts for each type
calculate_avg_interval <- function(years) {
sorted_years <- sort(years)
intervals <- diff(sorted_years)
return(mean(intervals))
}
avg_intervals <- lapply(all_droughts, calculate_avg_interval)
cat("\nAverage intervals between droughts (years):\n")
print(avg_intervals)
# Task 4: Create data frame for precipitation droughts in CEU
prcp_droughts_ceu <- data.frame(
year = c(1858, 1863, 1893, 1904, 1911, 1921, 1934, 1947, 1976, 2003, 2015),
region = rep("CEU", 11),
severity = c(3.8, 3.5, 3.6, 3.5, 3.4, 4.2, 3.7, 3.8, 3.5, 2.8, 2.5),  # Estimated from y-axis
area = c(40, 35, 45, 60, 65, 55, 75, 70, 60, 45, 40)  # Estimated from x-axis (%)
)
# Explore the structure
cat("\nStructure of prcp_droughts_ceu:\n")
str(prcp_droughts_ceu)
# Task 5: Filter years after 1900
years_vector <- prcp_droughts_ceu$year
years_after_1900 <- years_vector[years_vector > 1900]
cat("\nYears after 1900:\n")
print(years_after_1900)
# Task 6: Split years into 50-year intervals
int_50 <- cut(prcp_droughts_ceu$year,
breaks = seq(1760, 2010, by = 50),
include.lowest = TRUE,
right = FALSE)
cat("\n50-year intervals:\n")
print(table(int_50))
# Task 7: Calculate days since last drought
last_drought_date <- as.Date("2015-08-15")  # Assuming August 15, 2015 for the 2015 drought
days_since_last_drought <- as.numeric(difftime(Sys.Date(), last_drought_date, units = "days"))
cat("\nDays since last drought:", round(days_since_last_drought), "\n")
# Close the output file
sink()
# Task 8: Plot severity versus area
# Save the plot directly to a file
png("results/assignments/ceu_drought_severity_area.png", width = 800, height = 600)
plot(prcp_droughts_ceu$area, prcp_droughts_ceu$severity,
main = "Severity vs Area for CEU Precipitation Droughts",
xlab = "Area (%)",
ylab = "Severity",
pch = 19,
col = "darkred")
# Add year labels to points
text(prcp_droughts_ceu$area, prcp_droughts_ceu$severity,
labels = prcp_droughts_ceu$year,
pos = 4,
cex = 0.8)
dev.off()
# Write a confirmation message to a separate file
cat("Script completed successfully. Output saved to:", output_file, "\n",
"Plot saved to: results/assignments/ceu_drought_severity_area.png",
file = "results/assignments/task_from2C_confirmation.txt")
